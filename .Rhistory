setwd("~/DataAustin2020/R_Analysis/01_Demo")
# Checking for normality
ggplot(mtcars,aes(x=wt)) + geom_density() #visualize distribution using density plot
library(ggpubr)
# Checking for normality
ggplot(mtcars,aes(x=wt)) + geom_density() #visualize distribution using density plot
# or
shapiro.test(mtcars$wt)
?sample_n()
?slice_sample()
population_table <- read.csv('used_car_data.csv', check.names = F, stringAsFactors = F)
plt <- ggplot(population_table,aes(x=log10(Miles_Drivvn)))
plt + geom_density()
used_car_data.csv
population_table <- read.csv('used_car_data.csv', check.names = F, stringAsFactors = F)
population_table <- read.csv('used_car_data.csv', check.names = F, stringsAsFactors = F)
plt <- ggplot(population_table,aes(x=log10(Miles_Drivvn)))
plt + geom_density()
population_table <- read.csv('used_car_data.csv',check.names = F,stringsAsFactors = F) #import used car dataset
plt <- ggplot(population_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
sample_table <-  population_table %>% sample_n(50)
library(dplyr)
sample_table <-  population_table %>% sample_n(50)
plt <- ggplot(sample_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
sample_table <- population_table %>% sample_n(100) #randomly sample 50 data points
plt <- ggplot(sample_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
?t.test
t.test(log10(sample_table$Miles_Driven),mu=mean(log10(population_table$Miles_Driven))) #compare sample versus population means
sample_table <- population_table %>% sample_n(50) #randomly sample 50 data points
t.test(log10(sample_table$Miles_Driven),mu=mean(log10(population_table$Miles_Driven))) #compare sample versus population means
sample_table <- population_table %>% sample_n(50) #randomly sample 50 data points
t.test(log10(sample_table$Miles_Driven),mu=mean(log10(population_table$Miles_Driven))) #compare sample versus population means
# two sample t-test
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven)) #compare means of two samples
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven)) #compare means of two samples
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven)) #compare means of two samples
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven)) #compare means of two samples
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven)) #compare means of two samples
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven)) #compare means of two samples
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven)) #compare means of two samples
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven)) #compare means of two samples
# Pair t-test
mpg_data <- read.csv('mpg_modified.csv') #Import dataset
mpg_1999 <- mpg_data %>% filter(year==1999) #Select only 1999 datapoints
mpg_2008 <- mpg_data %>% filter(year==2008) #Select only 2008 datatpoints
t.test(mpg_1999$hwy, mpg_2008$hyw, paired = T)
t.test(mpg_1999$hwy, mpg_2008$hwy, paired = T)
?aov
?aov()
#ANOVA Test
mtcars_filt <- mtcars[,c("hp","cyl")] #filter columns from mtcars dataset
mtcars_filt$cyl <- factor(mtcars_filt$cyl) #convert numeric column to factor
aov(hp ~ cyl,data=mtcars_filt) #compare means across multiple levels
summary(aov(hp ~ cyl,data=mtcars_filt))
?cor
head(motors)
head(mtcars)
#Correlation
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt + geom_point() #create scatter plot
cor(mtcars$hp,mtcars$qsec) #calculate correlation coefficient
cor(mtcars$hp,mtcars$qsec) #calculate correlation coefficient
cor(mtcars$hp,mtcars$qsec) #calculate correlation coefficient
head(used_cars)
head(used_cars)
used_cars <- read.csv('used_car_data.csv',stringsAsFactors = F) #read in dataset
head(used_cars)
plt <- ggplot(used_cars, aes(x=Miles_Driven, y=Selling_price))
plt + geom_point()
plt <- ggplot(used_cars, aes(x=Miles_Driven, y=Selling_Price))
plt + geom_point()
cor(used_cars$Miles_Driven,used_cars$Selling_Price)
#Correlation Matric
used_matrix <- as.matrix(used_cars[,c("Selling_Price","Present_Price","Miles_Driven")]) #convert data frame into numeric matrix
cor(used_matrix)
?lm
#Linear Regression
lm(qsec ~ hp, mtcars)
lm(hp ~ qsec, mtcars)
summary(lm(qsec ~ hp, mtcars))
#Plotting the linear regression
model <- lm(qsec ~ hp,mtcars) #create linear model
model
yvals <- model$coefficients['hp']*mtcars$hp +  model$coefficients['(Intercept)'] #determine y-axis values from linear model
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt + geom_point() #+ geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
#Multiple Linear regression
m(qsec ~ mpg + disp + drat + wt + hp,data=mtcars) #generate multiple linear regression model
#Multiple Linear regression
lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars) #generate multiple linear regression model
summary(m(qsec ~ mpg + disp + drat + wt + hp,data=mtcars))
summary(lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars))
?chiqsq.test
?chisq.test
#chi-sqauare
#built contingency table
table(mpg$class,mpg$year) #generate contingency table
tbl <- table(mpg$class,mpg$year) #generate contingency table
chisq.test(tbl) #compare categorical distributions
setwd("~/DataAustin2020/Challenges/R_Analysis")
library(jsonlite)
library(ggpubr)
library(dplyr)
# Import data
mpg_table <- read.csv(file='MechaCar_mpg.csv', check.names = F, stringsAsFactors = F)
susp_table <- read.csv(file='Suspension_Coil.csv', check.names = F, stringsAsFactors = F)
head(mpg_table)
View(mpg_table)
View(mpg_data)
View(mpg_table)
library(tidyverse)
# Review data in mpg_table
head(mpg_table)
# Create matrix to inspect potential correlation
mpg_matrix <- as.matrix(mpg_table[,c("vehicle length", "vehicle weight", "spoiler angle", "ground clearance", "AWD","mpg")])
cor(mpg_matrix)
lm(mpg ~ vehicle.length + vehicle.weight + spoiler.angle + ground.clearance + AWD,mpg_table)\
lm(mpg ~ vehicle.length + vehicle.weight + spoiler.angle + ground.clearance + AWD,mpg_table)
lm(mpg ~ "vehicle length" + "vehicle weight" + "spoiler angle" + "ground clearance" + AWD,mpg_table)
lm(mpg ~ vehicle.length + vehicle.weight + spoiler.angle + ground.clearance + AWD, data = mpg_table)
lm("mpg" ~ "vehicle length" + "vehicle weight" + "spoiler angle" + "ground clearance" + "AWD",mpg_table)
lm("mpg" ~ "vehicle length" + "vehicle weight" + "spoiler angle" + "ground clearance" + "AWD",mpg_table)
lm(mpg ~ vehicle length + vehicle weight + spoiler angle + ground clearance + AWD,mpg_table)
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,mpg_table)
lm(mpg ~ vehiclelength + vehicleweight + spoilerangle + groundclearance + AWD,mpg_table)
# Import data
mpg_table <- read.csv(file='MechaCar_mpg.csv', check.names = F, stringsAsFactors = F)
# Review data in mpg_table
head(mpg_table)
# Create matrix to inspect potential correlation
mpg_matrix <- as.matrix(mpg_table[,c("vehicle_length", "vehicle_weight", "spoiler_angle", "ground_clearance", "AWD","mpg")])
cor(mpg_matrix)
lm(mpg ~ vehiclelength + vehicleweight + spoilerangle + groundclearance + AWD,mpg_table)
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,mpg_table)
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,mpg_table))
mpg_lm <- lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,mpg_table)
mpg_lm
summary(mpg_lm)
?summary
?summarize
# Suspension
susp_summary <-  susp_table %>% group_by(Manufacturing_Lot) %>% summarize(Mean_PSI=mean(PSI), Median_PSI=median(PSI), Variance=var(PSI), Standard_Deviation=sd(PSI),Num_Vehicles=n())
# Suspension
susp_summary <-  susp_table %>% group_by(Manufacturing_Lot) %>% summarize(Mean_PSI=mean(PSI), Median_PSI=median(PSI), Variance=var(PSI), Standard_Deviation=sd(PSI))
# Suspension
susp_summary <-  susp_table %>% group_by(Manufacturing_Lot) %>% summarize(Mean_PSI = mean(PSI), Median_PSI = median(PSI), Variance = var(PSI), Standard_Deviation = sd(PSI))
susp_summart
susp_summary
susp_summary_group <-  susp_table %>% summarize(Mean_PSI = mean(PSI), Median_PSI = median(PSI), Variance = var(PSI), Standard_Deviation = sd(PSI))
susp_summary <-  susp_table %>% summarize(Mean_PSI = mean(PSI), Median_PSI = median(PSI), Variance = var(PSI), Standard_Deviation = sd(PSI))
susp_summary
# Suspension
susp_summary_by_lot <-  susp_table %>% group_by(Manufacturing_Lot) %>% summarize(Mean_PSI = mean(PSI), Median_PSI = median(PSI), Variance = var(PSI), Standard_Deviation = sd(PSI))
susp_summary_by_lot
susp_summary_all_data <-  susp_table %>% summarize(Mean_PSI = mean(PSI), Median_PSI = median(PSI), Variance = var(PSI), Standard_Deviation = sd(PSI))
susp_summary_all_data
#t-test
t.test(susp_table$PSI,mu=1500)
#t-test on subsets
susp_lot1 <- subset(susp_table, Manufacturing_Lot == "Lot1")
susp_lot2 <- subset(susp_table, Manufacturing_Lot == 'Lot2')
susp_lot3 <- subset(susp_table, Manufacturing_Lot == "Lot3")
susp_lot2
t.test(susp_lot1$PSI,mu=1500)
t.test(susp_lot2$PSI,mu=1500)
t.test(susp_lot3$PSI,mu=1500)
# Create matrix to inspect potential correlation
mpg_matrix <- as.matrix(mpg_table[,c("vehicle_length", "vehicle_weight", "spoiler_angle", "ground_clearance", "AWD","mpg")])
cor(mpg_matrix)
mpg_lm <- lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,mpg_table)
mpg_lm
summary(mpg_lm)
mpg_lm2 <- lm(mpg ~ vehicle_length + vehicle_weight + ground_clearance + AWD,mpg_table)
mpg_lm2
summary(mpg_lm2)
mpg_lm2 <- lm(mpg ~ vehicle_length + ground_clearance ,mpg_table)
mpg_lm2
summary(mpg_lm2)
# Create matrix to inspect potential correlation
mpg_matrix <- as.matrix(mpg_table[,c("vehicle_length", "vehicle_weight", "spoiler_angle", "ground_clearance", "AWD","mpg")])
cor(mpg_matrix)
mpg_lm <- lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,mpg_table)
mpg_lm
summary(mpg_lm)
mpg_lm2 <- lm(mpg ~ vehicle_length + ground_clearance ,mpg_table)
mpg_lm2
summary(mpg_lm2)
# Suspension Summary Statistics
# Summary of all data
susp_summary_all_data <-  susp_table %>% summarize(Mean_PSI = mean(PSI), Median_PSI = median(PSI), Variance = var(PSI), Standard_Deviation = sd(PSI))
susp_summary_all_data
#Summary by Manufacturing_Lot
susp_summary_by_lot <-  susp_table %>% group_by(Manufacturing_Lot) %>% summarize(Mean_PSI = mean(PSI), Median_PSI = median(PSI), Variance = var(PSI), Standard_Deviation = sd(PSI))
susp_summary_by_lot
#t-test on remainder
susp_lot1_2 <- subset(susp_table, Manufacturing_Log != "Lot3")
#t-test on remainder
susp_lot1_2 <- subset(susp_table, Manufacturing_Lot != "Lot3")
t.test(susp_lot1_2$PSI,mu=1500)
#t-test on remainder
susp_lot1_2 <- subset(susp_table, Manufacturing_Lot != "Lot3")
#t-test
t.test(susp_table$PSI,mu=1500)
#t-test
t.test(susp_table$PSI,mu=1500)
t.test(susp_lot1$PSI,mu=1500)
t.test(susp_lot2$PSI,mu=1500)
PSI
t.test(susp_lot3$PSI,mu=1500)
#t-test on remainder
susp_lot1_2 <- subset(susp_table, Manufacturing_Lot != "Lot3")
#t-test on remainder
susp_lot1_2_table <- subset(susp_table, Manufacturing_Lot != "Lot3")
susp_summary_Lots_1_2 <- susp_summary_Lots_1_2 %>% summarize(Mean_PSI = mean(PSI), Median_PSI = median(PSI), Variance = var(PSI), Standard_Deviation = sd(PSI))
susp_summary_lots_1_2 <- susp_lot1_2_table %>% summarize(Mean_PSI = mean(PSI), Median_PSI = median(PSI), Variance = var(PSI), Standard_Deviation = sd(PSI))
t.test(susp_lot1_2$PSI,mu=1500)
susp_summary_lots_1_2
